<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>seohaebada on TIL</title>
    <link>https://example.com/</link>
    <description>Recent content in seohaebada on TIL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://example.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://example.com/docs/kotlin/004_Kotlin_Scoping_Functions/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/kotlin/004_Kotlin_Scoping_Functions/</guid>
      <description>Kotlin Scoping Functions apply vs. with, let, also, and run # apply, with, let, also, run # Kotlin의 Receiver # 객체 외부의 람다 코드 블록을 마치 해당 객체 내부에서 사용하는 것 처럼 작성할 수 있게 해주는 장치
block : T.() -&amp;gt; R 위 람다 블록은 객체 T를 receiver로 이용하여 객체 R을 반환한다.
receiver : 객체 T receiver를 사용하는 람다 : lambda with receiver block : (T) -&amp;gt; R 위의 경우 객체 T를 리시버가 아니라 람다 파라미터로 받는다.</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/webflux/001_r2dbc_intro/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/webflux/001_r2dbc_intro/</guid>
      <description>R2dbc 소개 # 왜 JDBC, JPA는 non-blocking을 지원할 수 없을까? # JDBC : 동기 blocking I/O 기반으로 설계 Socket에 대한 연결과 쿼리 실행 모두 동기 blocking으로 동작 JPA 또한 JDBC 기반 -&amp;gt; 비동기 non-blocking 지원 불가 그래서 결국, 비동기 non-blocing 기반의 API, 드라이버를 새로 만든다. R2dbc # Reactive Relational Database Connectivity 비동기 non-blocking 관계형 데이터베이스 드라이버 Reactive streams 스펙을 제공하며 Project reactor 기반으로 구현 R2dbc 지원 데이터베이스 # 공식지원 r2dbc-h2 r2dbc-mssql r2dbc-pool : Reactor pool로 커넥션 풀 제공 벤더 지원 oracle-r2dbc r2dbc-mariadb r2dbc-postgresql 커뮤니티 지원 r2dbc-mysql mirromutth 에서 2020년 5월부터 업데이트 X asyncer-io에서 RELEASE 지원 R2dbc MySQL 구조 # r2dbc-spi와 Reactor Netty 기반 Reactor Netty를 이용하여 r2dbc-spi 스펙을 구현 Reactor Netty client로 성능과 확장성 모두 제공 r2dbc-spi 스펙을 구현하여 여러 데이터베이스 시스템과 호환 R2dbc SPI # r2dbc Service Provider Interface SPI에서 제공하는 인터페이스를 구현해야한다.</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/kotlin/003_Kotlin_basic/</link>
      <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/kotlin/003_Kotlin_basic/</guid>
      <description>코틀린 문법 한번에 정리하기 # 주석 정리 Variable # // top-level var x = 5 fun main() { x+= 1 println(x) val a : Int = 1 val b = 1 val c : Int c = 3 val d : Int d = 123 //val(value) : 불변(Immutable) //var(variable) : 가변(Mutable) var e : String = &amp;#34;Hello&amp;#34; e = &amp;#34;World&amp;#34; var f = 123 // f = &amp;#34;hi&amp;#34; // 컴파일 오류 타입은 변경이 불가 } Function # // 기본적인 함수 선언 스타일 fun sum(a: Int, b: Int) : Int { return a + b } // 표현식 스타일 fun sum2(a: Int, b: Int) : Int = a + b // 표현식 &amp;amp; 반환타입 생략 fun sum3(a: Int, b: Int) = a + b // 몸통이 있는 함수는 반환 타입을 제거하면 컴파일 오류 fun sum4(a: Int, b: Int) : Int { return a + b } // 반환타입이 없는 함수는 Unit을 반환한다 fun printSum(a: Int, b: Int) : Unit { println(&amp;#34;$a + $b = ${a + b}&amp;#34;) } // 디폴트 파라미터 fun greeting(message: String = &amp;#34;안녕하세요!</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/reactive-streams/002_impl1_reactor/</link>
      <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/reactive-streams/002_impl1_reactor/</guid>
      <description>Reactive Streams 구현 라이브러리 (1) Reactor # Project reactor # Pivotal 사에서 개발 Spring reactor에서 사용 Mono와 Flux publisher 제공 Project reactor - Flux # 0..n개의 item을 전달 에러가 발생하면 error signal 전달하고 종료 모든 item을 전달했다면 complete signal 전달 하고 종료 backPressure 지원 Flux 예제 # SimpleSubscriber
FluxIterable publisher Subscription : StrictSubscriber @Slf4j @RequiredArgsConstructor public class p181_SimpleSubscriber&amp;lt;T&amp;gt; implements Subscriber&amp;lt;T&amp;gt; { private final Integer count; /** * 지속적으로 요청을 하는게 아니라, 딱 한번 N개의 요청을 받고 그 이후로 값을 계속 받음 * @param s the {@link Subscription} that allows requesting data via {@link Subscription#request(long)} */ @Override public void onSubscribe(Subscription s) { log.</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/reactive-streams/003_impl2_rxjava/</link>
      <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/reactive-streams/003_impl2_rxjava/</guid>
      <description>Reactive Streams 구현 라이브러리 (2) RxJava # RxJava # Netflix 사에서 개발 닷넷 프레임워크를 지원하는 Reactive Extensions를 포팅 Flowable, Observable, Single, Maybe, Completable, publisher 제공 RxJava - Flowable # 0..n개의 item을 전달 에러가 발생하면 error signal 전달 하고 종료 모든 item을 전달했다면 complete signal 전달하고 종료 backPressure 지원 Reactor의 Flux와 유사 Flowable 예제 # @Slf4j public class p199_FlowableExample { public static void main(String[] args) { log.info(&amp;#34;start main&amp;#34;); getItems() .subscribe(new p181_SimpleSubscriber&amp;lt;&amp;gt;(Integer.</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/reactive-streams/004_impl3_munity/</link>
      <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/reactive-streams/004_impl3_munity/</guid>
      <description>Reactive Streams 구현 라이브러리 (3) Munity # Mutiny # Hibernate reactive에서 비동기 라이브러리로 제공 Multi, Uni publisher 제공 Mutiny - Multi # 0..n개의 item을 전달 에러가 발생하면 error signal 전달 하고 종료 모든 item을 전달했다면 complete signal 전달하고 종료 backPressure 지원 Reactor의 flux와 유사 Multi 예제 # @Slf4j public class p218_MultiExample { public static void main(String[] args) { getItems() .subscribe() // subscribe 동시에 넘길 수 없음, subscribe() 호출 후 아래 호출 필요 .</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/redis/001_redis_datastructure/</link>
      <pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/redis/001_redis_datastructure/</guid>
      <description>레디스 자료구조 활용사례 # 리더보드 # 경쟁자들의 순위와 현재 점수를 보여주는 순위표를 의미한다. 스코어로 정렬되어 상위 경쟁자의 순위를 보여준다.
절대적 리더보드 서비스의 모든 유저를 정렬시켜 상위권의 목록만을 표시
상대적 리더보드 사용자의 스코어를 기반으로 그들을 다른 사용자와 비교해 순위를 결정 ex) 유저와 인접해있는 경쟁자들의 스코어를 보여주는 리더보드, 특정 그룹 내에서의 순위를 보여주는 리더보드, 주간 리더보드
리더보드는 기본적으로 사용자의 스코어를 기반으로 데이터를 정렬하는 서비스이기 때문에 사용자의 증가에 따라 가공해야할 데이터가 몇 배로 증가한다.</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/redis/002_redis_cache/</link>
      <pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/redis/002_redis_cache/</guid>
      <description>레디스를 캐시로 사용하기 # [캐시란?] # 데이터의 원본보다 더 빠르고 효율적으로 액세스할 수 있는 임시 데이터 저장소를 의미한다.
[캐시로서의 레디스] # 레디스는 자체적으로 고가용성 기능을 가지고있다. 일부 캐싱 전략에서는 캐시에 접근할 수 없게 되면 이는 곧바로 서비스 장애로 이어질 수 있따. 캐시 저장소도 일반적인 데이터 저장소와 같이 안정적으로 운영될 수 있는 조건을 갖추는 것이 좋다. 레디스의 센티널, 클러스터 기능을 사용하면 마스터 노드의 장애를 자동으로 감지해 페일오버(Failover; 장애대비)를 발생시키기 때문에, 운영자의 개입 없이 캐시는 정상으로 유지될 수 있어 가용성이 높아진다.</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/kotlin/002_Functional_Programming_Example/</link>
      <pubDate>Sun, 26 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/kotlin/002_Functional_Programming_Example/</guid>
      <description>코틀린으로 함수형 프로그래밍 시작하기 # [고차함수 : 함수를 함수에 넘기기] # 함수형 프로그램을 작성할때 기본이 되는 몇가지 주제
함수도 값이다. 함수를 변수에 대입하거나 데이터 구조에 저장하거나 함수의 인자로 넘길 수 있다. 고차함수란? 다른 함수를 인자로 받는 함수
고차함수 예제 어떤 수의 절댓값과 다른 수의 계승(팩토리얼; factorial)을 출력하는 프로그램
루프를 함수적으로 작성하는 방법 n의 계승을 계산하는 함수를 추가한다. 재귀(recursion)를 통해 순수 함수로 루프를 작성할 수 있다. fun factorial(i: Int): Int { fun go(n: Int, acc: Int): Int = // &amp;lt;1&amp;gt; if (n &amp;lt;= 0) acc // 루프를 종료시키려면 재귀 호출을 하지 않고, 값을 반환한다.</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/kotlin/001_Functional_Programming/</link>
      <pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/kotlin/001_Functional_Programming/</guid>
      <description>함수형 프로그래밍이란? # 명령어 스타일 (imperative style) # 컴퓨터에게 정해진 명령 또는 지시를 하나하나 내림으로써 각 명령 단계마다 시스템의 상태를 바꾼다. 처음에는 단순화하려는 의도나, 시스템이 커질수록 복잡해지며, 그 결과 코드를 더이상 유지보수할 수 없게 되고, 테스트 하기 어려워지며 코드를 추론하는데에 어려워진다. 함수형 프로그래밍 (FP, Functional Programming) # 위 명령어 스타일의 대안으로, &amp;lsquo;부수 효과&amp;rsquo;를 완전히 없애는 개념이다. 함수형 프로그래밍의 전제는, 순수 함수를 통해 프로그램을 구성한다는 것이다. 순수 함수 : 아무 부수 효과가 없는 함수 부수 효과란?</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/reactive-streams/001_reactive_streams_component/</link>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/reactive-streams/001_reactive_streams_component/</guid>
      <description>리액티브 스트림즈란? # 리액티브한 코드 작성을 위한 구성을 도와주는 리액티브 라이브러리가 있다. 이 리액티브 라이브러리를 어떻게 구현해야할지 정의해놓은 별도의 표준 사양을 리액티브 스트림즈(Reactive Streams)라고 한다.
리액티브 스트림즈는 &amp;lsquo;데이터 스트림을 Non-Blocking이면서 비동기적인 방식으로 처리하기 위한 리액티브 라이브러리 표준 사양&amp;rsquo;이라고 표현할 수 있다. 이를 구현한 구현체로는 RxJava, Reactor, Akka Streams, Java 9 Flow API 등이 있고, 그 중에 Spring framework와 가장 궁합이 잘 맞는 구현체는 Reactor이다.
리액티브 구성요소 # 리액티브 스트림즈를 통해 구현해야 되는 API 컴포넌트에는 Publisher, Subscriber, Subscription, Processor 가 있다.</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/algorithm/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/algorithm/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/batch/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/batch/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/data-structure/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/data-structure/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/ddd/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/ddd/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/docker/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/docker/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/etc/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/etc/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/java/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/java/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/jenkins/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/jenkins/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/jpa/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/jpa/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/kafka/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/kafka/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/linux/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/linux/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/mongodb/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/mongodb/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/msa/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/msa/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/mvc/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/mvc/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/mysql/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/mysql/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/network/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/network/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/operating-system/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/operating-system/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/oracle/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/oracle/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/security/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/security/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/servlet/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/servlet/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/spring/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/spring/000_sample/</guid>
      <description>sample</description>
    </item>
    <item>
      <title></title>
      <link>https://example.com/docs/test/000_sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/test/000_sample/</guid>
      <description>sample</description>
    </item>
  </channel>
</rss>
